// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE uid = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, uid string) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, uid)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, uid, created, amount, currency FROM transactions
WHERE uid = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, uid string) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, uid)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Created,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, uid, created, amount, currency FROM transactions
ORDER BY id
`

func (q *Queries) GetTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Created,
			&i.Amount,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTransaction = `-- name: InsertTransaction :one
INSERT INTO transactions (
  amount, currency
) VALUES (
  $1, $2
)
RETURNING id, uid, created, amount, currency
`

type InsertTransactionParams struct {
	Amount   string
	Currency string
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, insertTransaction, arg.Amount, arg.Currency)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Created,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :exec
UPDATE transactions
  set amount = $2,
  currency = $3
WHERE uid = $1
`

type UpdateTransactionParams struct {
	Uid      string
	Amount   string
	Currency string
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, updateTransaction, arg.Uid, arg.Amount, arg.Currency)
	return err
}
